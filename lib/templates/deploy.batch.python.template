goto Deployment

:: Utility Functions
:: -----------------

:SelectPythonVersion

pushd "%DEPLOYMENT_TEMP%"

IF EXIST "%DEPLOYMENT_SOURCE%\runtime.txt" (
  echo Detecting Python runtime from runtime.txt
  copy /y "%DEPLOYMENT_SOURCE%\runtime.txt" "%DEPLOYMENT_TEMP%\runtime.txt"
  IF !ERRORLEVEL! NEQ 0 goto error
) ELSE (
  echo Detecting Python runtime from site configuration
  python -c "import sys;o=open('runtime.txt', 'w');o.write('python-{0}.{1}'.format(sys.version_info.major, sys.version_info.minor));o.close();"
  IF !ERRORLEVEL! NEQ 0 goto error
)

:: Read in the runtime, keep the major and minor version, strip the rest
SET /P TEMP_RUNTIME=<runtime.txt
SET PYTHON_RUNTIME=%TEMP_RUNTIME:~0,10%

IF "%PYTHON_RUNTIME%" == "python-2.7" (
  SET PYTHON_VER=2.7
  SET PYTHON_EXE=%SYSTEMDRIVE%\python27\python.exe
  SET PYTHON_ENV_MODULE=virtualenv
) ELSE (
  IF "%PYTHON_RUNTIME%" == "python-3.4" (
    SET PYTHON_VER=3.4
    SET PYTHON_EXE=%SYSTEMDRIVE%\python34\python.exe
    SET PYTHON_ENV_MODULE=venv
  ) ELSE (
    echo Unsupported Python runtime: %PYTHON_RUNTIME%
    echo Specify a supported value in runtime.txt:
    echo python-2.7
    echo python-3.4
    goto error
  )
)

echo Detected %PYTHON_RUNTIME%

popd

goto :EOF

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: Deployment
:: ----------

:Deployment
echo Handling python deployment.

:: 1. KuduSync
IF /I "%IN_PLACE_DEPLOYMENT%" NEQ "1" (
  call :ExecuteCmd "%KUDU_SYNC_CMD%" -v 50 -f "%DEPLOYMENT_SOURCE%" -t "%DEPLOYMENT_TARGET%" -n "%NEXT_MANIFEST_PATH%" -p "%PREVIOUS_MANIFEST_PATH%" -i ".git;.hg;.deployment;deploy.cmd"
  IF !ERRORLEVEL! NEQ 0 goto error
)

IF NOT EXIST "%DEPLOYMENT_TARGET%\requirements.txt" goto postPython
IF EXIST "%DEPLOYMENT_TARGET%\.skipPythonDeployment" goto postPython

echo Detected requirements.txt.  You can skip Python specific steps with a .skipPythonDeployment file.

:: 2. Detect Python runtime
call :SelectPythonVersion

pushd "%DEPLOYMENT_TARGET%"

:: 3. Create virtual environment
IF NOT EXIST "%DEPLOYMENT_TARGET%\env\azure.env.%PYTHON_RUNTIME%.txt" (
  IF EXIST "%DEPLOYMENT_TARGET%\env" (
    echo Deleting incompatible virtual environment.
    rmdir /q /s "%DEPLOYMENT_TARGET%\env"
    IF !ERRORLEVEL! NEQ 0 goto error
  )

  echo Creating %PYTHON_RUNTIME% virtual environment.
  %PYTHON_EXE% -m %PYTHON_ENV_MODULE% env
  IF !ERRORLEVEL! NEQ 0 goto error

  copy /y NUL "%DEPLOYMENT_TARGET%\env\azure.env.%PYTHON_RUNTIME%.txt" >NUL
) ELSE (
  echo Found compatible virtual environment.
)

:: 4. Install packages
echo Pip install requirements.
env\scripts\pip install -r requirements.txt
IF !ERRORLEVEL! NEQ 0 goto error

REM Add additional package installation here
REM -- Example --
REM env\scripts\easy_install pytz
REM IF !ERRORLEVEL! NEQ 0 goto error

:: 5. Copy web.config
IF EXIST "%DEPLOYMENT_SOURCE%\web.%PYTHON_VER%.config" (
  echo Overwriting web.config with web.%PYTHON_VER%.config
  copy /y "%DEPLOYMENT_SOURCE%\web.%PYTHON_VER%.config" "%DEPLOYMENT_TARGET%\web.config"
)

:: 6. Django collectstatic
IF EXIST "%DEPLOYMENT_TARGET%\manage.py" (
  IF EXIST "%DEPLOYMENT_TARGET%\env\lib\site-packages\django" (
    IF NOT EXIST "%DEPLOYMENT_TARGET%\.skipDjango" (
      echo Collecting Django static files. You can skip Django specific steps with a .skipDjango file.
      IF NOT EXIST "%DEPLOYMENT_TARGET%\static" (
        MKDIR "%DEPLOYMENT_TARGET%\static"
      )
      env\scripts\python manage.py collectstatic --noinput --clear
    )
  )
)

popd

:postPython

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
